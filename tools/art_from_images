#!/usr/bin/env bash

clean() { rm -f $script; exit 0; }

err() { echo -e "${clr:+\e[31m}[!] ${@:2}\e[0m"; exit $1; }

info() { echo -e "${clr:+\e[37m}[=] $@\e[0m"; }

long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}

usage() {
    echo "Usage: ${0/*\//} [OPTIONS]"
    echo
    echo "Parse images and create ruby code for ArTTY"
    echo
    echo "Options:"
    echo "    -f, --force          Create ruby code even if it exists"
    echo "    -h, --help           Display this help message"
    echo "    -i, --imgs=DIR       Read images from the specified"
    echo "                         directory, can be used more than"
    echo "                         once (default: $dir)"
    echo "    --nocolor            Don't colorize output"
    echo "    -o, --output=DIR     Write files to specified directory"
    echo "                        (default: $output)"
    echo "    -p, --parallel       Run using parallel (if installed)"
    local default="(default: $threads)"
    echo "    -t, --threads=NUM    Use the specied number of threads"
    echo "                         if running in parallel $default"
    echo
    exit $1
}

warn() { echo -e "${clr:+\e[33m}[-] $@\e[0m"; }

declare -a args dirs
unset force help parallel
clr="true"
dir="."
output="."
threads="32"

while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-f"|"--force") force="true" ;;
        "-h"|"--help") help="true" ;;
        "-i"|"--imgs"*) dirs+=($(long_opt $@)) || shift ;;
        "--nocolor") unset clr ;;
        "-o"|"--output"*) output="$(long_opt $@)" || shift ;;
        "-p"|"--parallel") parallel="true" ;;
        "-t"|"--thread"*) threads="$(long_opt $@)" || shift ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

# Check for valid params and missing dependencies
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 2

# Determine parallel situation
if [[ -n $parallel ]] && [[ -z $(command -v parallel) ]]; then
    warn "Parallel is not installed, using default behavior"
    unset parallel
fi

# Cite if needed
if [[ -n $parallel ]] && [[ ! -f $HOME/.parallel/will-cite ]]; then
    mkdir -p $HOME/.parallel
    parallel --citation
fi

# Script used by parallel
script="/tmp/${0/*\//}.parallel"
trap clean SIGINT

cat >$script <<EOF
#!/usr/bin/env bash

err() { echo -e "\r${clr:+\e[31m}[!] \${@:2}\e[0m\e[K"; exit \$1; }

# info() { echo -e "\r${clr:+\e[32m}[+] \$@\e[0m\e[K"; }

# warn() { echo -e "\r${clr:+\e[33m}[-] \$@\e[0m\e[K"; }

filename="\$1"
ofilename="\$(
    echo "\${filename%_*}" | awk -F "/" '{print \$NF}' | \\
    sed -r "s/[-.]/_/g" | tr "[:upper:]" "[:lower:]"
).rb"

[[ ! -f $output/\$ofilename ]] || [[ "x$force" != "x" ]] || exit 1

arTTY -g \$filename >$output/\$ofilename

if [[ -n \$(find $output/\$ofilename -size 0) ]]; then
    err 1 "\$filename failed"
fi
EOF
chmod 700 $script

[[ ${#dirs[@]} -gt 0 ]] || dirs=($dir)
mkdir -p $output

info "Processing dataset for jobs"

declare -a dataset=($(
    find ${dirs[@]} -mindepth 1 -maxdepth 1 -regextype awk \
    -iregex ".+_[0-9]+x[0-9]+\.(jpg|png)"
))
let "total = ${#dataset[@]}"

[[ $total -ne 0 ]] || err 3 "No dataset provided"

info "$total jobs to run"
if [[ -n $parallel ]]; then
    # Math
    left="$total"
    marker="0"
    maxdata="$(
        parallel -r --show-limit </dev/null | \
        awk '/Maximal used/ {print $NF; exit}'
    )"
    let "remainder = total % maxdata"
    round="0"
    let "rounds = total / maxdata"
    [[ $remainder -eq 0 ]] || let "rounds += 1"

    # Loop thru rounds
    [[ $rounds -eq 1 ]] || info "Splitting into $rounds rounds"
    while [[ $left -gt 0 ]]; do
        let "round += 1"
        [[ $rounds -eq 1 ]] || warn "Round $round"

        increment="$left"
        [[ $left -le $maxdata ]] || increment="$maxdata"

        parallel --bar --lb -P $threads -r $script {} ::: \
            ${dataset[@]:$marker:$increment}

        let "left -= increment"
        let "marker += increment"
        echo -en "\e[1A\e[K"
    done
else
    let "count = 1"
    for data in "${dataset[@]}"; do
        echo -en "\r[$count/$total]\e[K" >&2
        $script "$data"
        let "count += 1"
    done; unset data
fi

clean
