#!/usr/bin/env ruby

require "arTTY"
require "hilighter"
require "io/wait"
require "json_config"
require "optparse"
require "scoobydoo"

class ArTTYConfig < JSONConfig
    extend JSONConfig::Keys

    add_key("art")
    add_bool_key("clear_screen")
    add_key("exclude")
    add_key("fields")
    add_bool_key("fit")
    add_bool_key("fortune")
    add_key("match")
    add_bool_key("random")
    add_bool_key("sysinfo")

    def initialize(file = nil)
        file ||= "~/.config/arTTY/rc"
        @defaults = {
            "art" => nil,
            "clear_screen" => false,
            "exclude" => nil,
            "fields" => Array.new,
            "fit" => false,
            "fortune" => false,
            "match" => nil,
            "random" => false,
            "sysinfo" => false
        }
        super(file, false)
    end
end

class ArTTYExit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    EXTRA_ARGUMENTS = 4
    EXCEPTION = 5
    AMBIGUOUS_ARGUMENT = 6
    UNSUPPORTED_ART = 7
end

def parse(args)
    options = Hash.new
    options["action"] = "draw"
    options["conf"] = ArTTYConfig.new
    options["generate"] = nil
    options["verbose"] = false

    info = "Art for your TTY."

    parser = OptionParser.new do |opts|
        opts.summary_width = 25

        opts.banner = "Usage: #{File.basename($0)} [OPTIONS] [art]"

        opts.on("", "DESCRIPTION")

        info.scan(/\S.{0,76}\S(?=\s|$)|\S+/).each do |line|
            opts.on("    #{line}")
        end

        opts.on("", "OPTIONS")

        opts.on("--cache", "Refresh the cache") do
            options["action"] = "cache"
        end

        opts.on("-c", "--[no-]clear", "Clear screen first") do |c|
            options["conf"].clear_screen if (c)
            options["conf"].no_clear_screen unless (c)
        end

        opts.on("--delete", "Reset the default config") do
            options["action"] = "delete"
        end

        opts.on("-d", "--demo", "Demo art matching criteria") do
            options["action"] = "demo"
        end

        opts.on("--edit", "Amend default config with new options") do
            options["action"] = "edit"
        end

        opts.on(
            "-e",
            "--exclude=PATTERN",
            "Exclude art matching PATTERN"
        ) do |pattern|
            options["conf"].set_exclude(pattern)
        end

        opts.on(
            "--fields=FIELDS",
            "Specify order of sysinfo (comma-separated): colors,",
            "cpu, fs, host, hostname, ip, ipv4, ipv6, kernel, os,",
            "ram, shell, tty, uptime"
        ) do |fields|
            options["conf"].set_fields(fields.split(","))
            options["conf"].sysinfo
        end

        opts.on(
            "--[no-]fit",
            "Only use art that fits in the current window"
        ) do |f|
            f ? options["conf"].fit : options["conf"].no_fit
        end

        opts.on(
            "-f",
            "--[no-]fortune",
            "Display a fortune as well (if installed)"
        ) do |f|
            f ? options["conf"].fortune : options["conf"].no_fortune
        end

        opts.on("-h", "--help", "Display this help message") do
            puts opts
            exit ArTTYExit::GOOD
        end

        opts.on(
            "-g",
            "--generate=IMAGE",
            "Generate ArTTY art from IMAGE (NAME_WxH.png)"
        ) do |image|
            options["action"] = "generate"
            options["generate"] = image
        end

        opts.on(
            "--ls",
            "--list-art",
            "List art matching criteria"
        ) do
            options["action"] = "list"
        end

        opts.on(
            "-m",
            "--matching=PATTERN",
            "Only use art matching PATTERN"
        ) do |pattern|
            options["conf"].set_match(pattern)
        end

        opts.on(
            "-r",
            "--[no-]random",
            "Display random art matching criteria"
        ) do |r|
            r ? options["conf"].random : options["conf"].no_random
        end

        opts.on("--save", "Save current options as default") do
            options["action"] = "save"
        end

        opts.on(
            "-s",
            "--[no-]sysinfo",
            "Display system info as well"
        ) do |s|
            s ? options["conf"].sysinfo : options["conf"].no_sysinfo
        end

        opts.on(
            "-v",
            "--[no-]verbose",
            "Show backtrace when error occurs"
        ) do |v|
            options["verbose"] = v
        end

        opts.on("--version", "Show version") do
            __FILE__.match(/arTTY-(\d+\.\d+\.\d+)/) do |m|
                puts m[1]
            end
            exit ArTTYExit::GOOD
        end
    end

    begin
        parser.parse!
    rescue OptionParser::InvalidOption => e
        puts e.message
        puts parser
        exit ArTTYExit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts e.message
        puts parser
        exit ArTTYExit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts e.message
        puts parser
        exit ArTTYExit::MISSING_ARGUMENT
    rescue OptionParser::AmbiguousOption => e
        puts e.message
        puts parser
        exit ArTTYExit::AMBIGUOUS_ARGUMENT
    end

    if (args.length == 1)
        if (!options["conf"].random?)
            options["conf"].set_art(args[0])
        end
    elsif (args.length > 1)
        puts parser
        exit ArTTYExit::EXTRA_ARGUMENTS
    end

    return options
end

begin
    options = parse(ARGV)
rescue Interrupt
    # Exit gracefully on ^C
    exit ArTTYExit::GOOD
end

begin
    arTTY = ArTTY.new
    config = options["conf"]
    arTTY.exclude(config.get_exclude) if (config.exclude?)
    arTTY.match(config.get_match) if (config.match?)
    info = nil
    if (config.sysinfo?)
        info = ArTTY::SystemInfo.new(config.get_fields)
    end

    # Remove all that do not fit
    if (config.fit?)
        height = %x(tput lines).to_i - 4 # Leave some space for prompt
        width = %x(tput cols).to_i - 1
        if (config.sysinfo?)
            width -= (info.width + 2)
            info = nil if ((height <= info.height) || (width <= 0))
        end
        arTTY.fits(width, height)
    end

    case options["action"]
    when "cache"
        arTTY.cache
    when "delete"
        config.default
    when "demo"
        arTTY.art.each do |name|
            puts "### #{name} ###".white
            art = arTTY.get(name, info).draw
            puts "\n#{art}\n" if (!art.empty?)
        end
    when "edit"
        config.save # Save modified config
    when "generate"
        puts ArTTY::Generator.new.generate(options["generate"])
    when "list"
        puts arTTY.art
    when "save"
        config.savediff # Overwrite old save with new changes
    else
        # Randomize
        config.set_art(arTTY.random) if (config.random?)

        # Ensure art is not nil
        config.set_art("none") if (!config.art?)

        # Clear screen if requested
        system("clear") if (config.clear_screen?)

        art = arTTY.get(config.get_art, info).draw
        puts "\n#{art}\n" if (!art.empty?)
        if (config.fortune? && ScoobyDoo.where_are_you("fortune"))
            system("fortune -s")
        end
    end
rescue ArTTY::Error => e
    $stderr.puts e.message.white.on_red
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line.yellow
        end
    end
    exit ArTTYExit::EXCEPTION
rescue Interrupt
    # Exit gracefully on ^C
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before we're done with STDOUT.
rescue Exception => e
    $stderr.puts "Oops! Looks like an error has occured! If the " \
        "error persists, file a bug at:".wrap
    $stderr.puts
    $stderr.puts "    https://gitlab.com/mjwhitta/arTTY/issues"
    $stderr.puts
    $stderr.puts "Maybe the message below will help. If not, you " \
        "can use the --verbose flag to get a backtrace.".wrap

    $stderr.puts e.message.white.on_red
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line.light_yellow
        end
    end
    exit ArTTYExit::EXCEPTION
end
exit ArTTYExit::GOOD
