#!/usr/bin/env ruby

require "arTTY"
require "hilighter"
require "io/wait"
require "jsoncfg"
require "optparse"
require "scoobydoo"
require "typhoeus"

class ArTTYConfig < JSONConfig
    extend JSONConfig::Keys

    add_key("art")
    add_bool_key("clear_screen")
    add_bool_key("devexcuse")
    add_key("exclude")
    add_key("fields")
    add_bool_key("fit")
    add_bool_key("fortune")
    add_key("match")
    add_bool_key("random")
    add_bool_key("sysinfo")

    def initialize(file = nil)
        file ||= "~/.config/arTTY/rc"
        @defaults = {
            "art" => "",
            "clear_screen" => true,
            "devexcuse" => false,
            "exclude" => "",
            "fields" => Array.new,
            "fit" => true,
            "fortune" => false,
            "match" => "",
            "random" => true,
            "sysinfo" => true
        }
        super(file, false)
    end
end

class ArTTYExit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    EXTRA_ARGUMENTS = 4
    EXCEPTION = 5
    AMBIGUOUS_ARGUMENT = 6
    UNSUPPORTED_ART = 7
end

def devexcuse
    begin
        Typhoeus::Request.get(
            "http://developerexcuses.com"
        ).body.match(/<a href.+>(.+)<\/a>/) do |m|
            return m[1]
        end
    rescue
        return nil
    end
end

def parse(args)
    options = Hash.new
    options["action"] = "draw"
    options["all"] = false
    options["art"] = ""
    options["clear"] = false
    options["conf"] = ArTTYConfig.new
    options["devexcuse"] = false
    options["exclude"] = ""
    options["fields"] = Array.new
    options["fit"] = false
    options["fortune"] = false
    options["generate"] = nil
    options["match"] = ""
    options["plain"] = false
    options["random"] = false
    options["sysinfo"] = false
    options["verbose"] = false

    info = "Art for your TTY."

    parser = OptionParser.new do |opts|
        opts.summary_width = 25

        opts.banner = "Usage: #{File.basename($0)} [OPTIONS] [art]"

        opts.on("", "DESCRIPTION")

        info.scan(/\S.{0,76}\S(?=\s|$)|\S+/).each do |line|
            opts.on("    #{line}")
        end

        opts.on("", "OPTIONS")

        opts.on("-a", "--all", "Ignore previous filtering") do
            options["all"] = true
        end

        opts.on("--cache", "Refresh the cache") do
            case options["action"]
            when "draw"
                options["action"] = "cache"
            else
                puts(opts)
                exit ArTTYExit::INVALID_OPTION
            end
        end

        opts.on("-c", "--clear", "Clear screen first") do
            options["clear"] = true
        end

        opts.on("--demo", "Demo art matching filters") do
            case options["action"]
            when "draw"
                options["action"] = "demo"
            else
                puts(opts)
                exit ArTTYExit::INVALID_OPTION
            end
        end

        opts.on("-d", "--devexcuse", "Display a developer excuse") do
            options["devexcuse"] = true
        end

        opts.on("--edit", "Amend config with new options") do
            case options["action"]
            when "draw"
                options["action"] = "edit"
            else
                puts(opts)
                exit ArTTYExit::INVALID_OPTION
            end
        end

        opts.on(
            "-e",
            "--exclude=PATTERN",
            "Exclude art matching pattern"
        ) do |pattern|
            options["exclude"] = pattern
        end

        opts.on(
            "--fields=FIELDS",
            "Specify order of sysinfo (comma-separated, see",
            "FIELDS)"
        ) do |fields|
            options["fields"] = fields.split(",")
            options["sysinfo"] = true
        end

        opts.on(
            "--fit",
            "Only use art that fits in the current window"
        ) do |f|
            options["fit"] = true
        end

        opts.on(
            "-f",
            "--fortune",
            "Display a fortune (if installed)"
        ) do
            options["fortune"] = true
        end

        opts.on("-h", "--help", "Display this help message") do
            puts(opts)
            exit ArTTYExit::GOOD
        end

        opts.on(
            "-g",
            "--generate=IMAGE",
            "Generate ArTTY art from image (NAME_WxH.png)"
        ) do |image|
            case options["action"]
            when "draw"
                options["action"] = "generate"
            else
                puts(opts)
                exit ArTTYExit::INVALID_OPTION
            end
            options["generate"] = image
        end

        opts.on("--ls", "List art matching filters") do
            case options["action"]
            when "draw"
                options["action"] = "list"
            else
                puts(opts)
                exit ArTTYExit::INVALID_OPTION
            end
        end

        opts.on(
            "-m",
            "--match=PATTERN",
            "Only use art matching pattern"
        ) do |pattern|
            options["match"] = pattern
        end

        opts.on(
            "-p",
            "--plain",
            "Ignore previous flags and filtering (useful for",
            "tab-completion with --ls)"
        ) do
            options["plain"] = true
        end

        opts.on(
            "-r",
            "--random",
            "Display random art matching filters"
        ) do
            options["random"] = true
        end

        opts.on("--save", "Save specified options as default") do
            case options["action"]
            when "draw"
                options["action"] = "save"
            else
                puts(opts)
                exit ArTTYExit::INVALID_OPTION
            end
        end

        opts.on("-s", "--sysinfo", "Display system info") do
            options["sysinfo"] = true
        end

        opts.on(
            "-u",
            "--update",
            "Download new art and refresh the cache"
        ) do
            case options["action"]
            when "draw"
                options["action"] = "update"
            else
                puts(opts)
                exit ArTTYExit::INVALID_OPTION
            end
        end

        opts.on(
            "-v",
            "--verbose",
            "Show backtrace when error occurs"
        ) do
            options["verbose"] = true
        end

        opts.on("-V", "--version", "Show version") do
            __FILE__.match(/arTTY-(\d+\.\d+\.\d+)/) do |m|
                puts(m[1])
            end
            exit ArTTYExit::GOOD
        end

        opts.on(
            "",
            "FIELDS",
            "    colors            Show terminal colors",
            "    cpu               Show cpu info",
            "    fs                Show filesystem usage",
            "    host, hostname    Show hostname",
            "    ip                Show IPv4 and IPv6 addresses",
            "    ipv4              Show only IPv4 addresses",
            "    ipv6              Show only IPv6 addresses",
            "    kernel            Show kernel info",
            "    os                Show operating system info",
            "    ram               Show RAM usage",
            "    shell             Show current shell",
            "    tty               Show TTY info",
            "    uptime            Show uptime"
        )
    end

    begin
        parser.parse!
    rescue OptionParser::InvalidOption => e
        puts(e.message)
        puts(parser)
        exit ArTTYExit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts(e.message)
        puts(parser)
        exit ArTTYExit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts(e.message)
        puts(parser)
        exit ArTTYExit::MISSING_ARGUMENT
    rescue OptionParser::AmbiguousOption => e
        puts(e.message)
        puts(parser)
        exit ArTTYExit::AMBIGUOUS_ARGUMENT
    end

    if (args.length == 1)
        options["random"] = false
        options["art"] = args[0]
    elsif (args.length > 1)
        puts(parser)
        exit ArTTYExit::EXTRA_ARGUMENTS
    end

    return options
end

def validate(cfg, opts)
    if opts["all"]
        cfg.no_fit
        cfg.set_exclude("")
        cfg.set_match("")
    elsif opts["plain"]
        cfg.default
        cfg.no_clear_screen
        cfg.no_fit
        cfg.no_random
        cfg.no_sysinfo
    end

    cfg.clear_screen if (opts["clear"])
    cfg.devexcuse if (opts["devexcuse"])
    cfg.set_exclude(opts["exclude"]) if (!opts["exclude"].empty?)
    cfg.set_fields(opts["fields"]) if (!opts["fields"].empty?)
    cfg.fit if (opts["fit"])
    cfg.fortune if (opts["fortune"])
    cfg.set_match(opts["match"]) if (!opts["match"].empty?)
    cfg.random if (opts["random"])
    cfg.sysinfo if (opts["sysinfo"])
end

begin
    options = parse(ARGV)
rescue Interrupt
    # Exit gracefully on ^C
    exit ArTTYExit::GOOD
end

begin
    config = options["conf"]
    validate(config, options)

    excuse = nil
    if (config.devexcuse?)
        excuse = devexcuse
    end

    fortune = nil
    if (config.fortune? && ScoobyDoo.where_are_you("fortune"))
        fortune = %x(fortune -s)
    end

    arTTY = ArTTY.new
    arTTY.exclude(config.get_exclude) if (config.exclude?)
    arTTY.match(config.get_match) if (config.match?)

    info = nil
    if (config.sysinfo?)
        info = ArTTY::SystemInfo.new(config.get_fields)
    end

    # Remove all that do not fit
    if (config.fit?)
        height = %x(tput lines).to_i - 4 # Leave some space for prompt
        width = %x(tput cols).to_i - 1
        if (config.sysinfo?)
            width -= (info.width + 2)
            info = nil if ((height <= info.height) || (width <= 0))
        end
        if (excuse)
            eheight = excuse.split("\n").length
            ewidth = excuse.split("\n").map(&:length).max
            excuse = nil if (height <= eheight || ewidth > width)
            height -= eheight if (excuse)
        end
        if (fortune)
            fheight = fortune.split("\n").length
            fwidth = fortune.split("\n").map(&:length).max
            fortune = nil if (height <= fheight || fwidth > width)
            height -= fheight if (fortune)
        end
        arTTY.fits(width, height)
    end

    case options["action"]
    when "cache"
        arTTY.cache
    when "demo"
        arTTY.art.each do |name|
            puts("### #{name} ###".white)
            art = arTTY.get(name, info).draw
            puts("\n#{art}\n") if (!art.empty?)
        end
    when "edit"
        config.set_art("") if (config.random?)
        config.save # Save modified config
    when "generate"
        puts(
            ArTTY::Generator.new.generate(
                options["generate"],
                options["conf"].getdiff("art")
            )
        )
    when "list"
        puts(arTTY.art)
    when "save"
        config.set_art("") if (config.random?)
        config.savediff # Overwrite old save with new changes
    when "update"
        arTTY.cache(true)
    else
        # Randomize
        config.set_art(arTTY.random) if (config.random?)

        # Ensure art is not nil
        config.set_art("none") if (!config.art?)

        # Clear screen if requested
        system("clear") if (config.clear_screen?)

        art = arTTY.get(config.get_art, info).draw
        puts("\n#{art}\n") if (!art.empty?)
        puts(excuse) if (excuse)
        puts(fortune) if (fortune)
    end
rescue ArTTY::Error => e
    $stderr.puts(e.message.white.on_red)
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts(line.yellow)
        end
    end
    exit ArTTYExit::EXCEPTION
rescue Interrupt
    # Exit gracefully on ^C
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before we're done with STDOUT.
rescue Exception => e
    $stderr.puts(
        [
            "Oops! Looks like an error has occured! If the error",
            "persists, file a bug at:"
        ].join(" ").wrap
    )
    $stderr.puts
    $stderr.puts("    https://gitlab.com/mjwhitta/arTTY/issues")
    $stderr.puts
    $stderr.puts(
        [
            "Maybe the message below will help. If not, you can use",
            "the --verbose flag to get a backtrace."
        ].join(" ").wrap
    )

    $stderr.puts(e.message.white.on_red)
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts(line.light_yellow)
        end
    end
    exit ArTTYExit::EXCEPTION
end
exit ArTTYExit::GOOD
